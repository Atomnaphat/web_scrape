import requests
from bs4 import BeautifulSoup
import pymongo
import csv
from datetime import datetime

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏à‡∏≤‡∏Å onclick
import re
def extract_link_from_onclick(onclick_text):
    match = re.search(r"['\"](/product/[^'\"]+)['\"]", onclick_text)
    return f"https://www.homepro.co.th{match.group(1)}" if match else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå"

# URL ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
web = 'https://www.homepro.co.th/?gad_source=1'

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
client = pymongo.MongoClient("mongodb://localhost:27017/")
db = client["scraping_db"]
collection = db["homepro_logs"]

try:
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    response = requests.get(web)
    response.raise_for_status()

    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå HTML
    soup = BeautifulSoup(response.content, 'html.parser')

    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    products = soup.find_all('div', class_='product-plp-card')

    print(f"‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(products)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

    data = []
    incomplete_count = 0

    for product in products:
        try:
            title = product.find('div', class_='item-title').text.strip()
            price = product.find('div', class_='original-price').text.strip()

            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏¥‡∏á‡∏Å‡πå
            link_element = product.find('a', href=True)
            if link_element and link_element.has_attr('data-url'):
                link = f"https://www.homepro.co.th{link_element['data-url']}"
            elif link_element and link_element.has_attr('onclick'):
                link = extract_link_from_onclick(link_element['onclick'])
            elif link_element:
                link = link_element['href']
                # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏°‡∏µ‡πÇ‡∏î‡πÄ‡∏°‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° https://www.homepro.co.th
                if not link.startswith('http'):
                    link = f"https://www.homepro.co.th{link}"
            else:
                link = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏¥‡∏á‡∏Å‡πå"

            print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {link}")

            data.append({
                "title": title,
                "price": price,
                "link": link,
                "scraped_at": datetime.now()
            })
        except AttributeError:
            incomplete_count += 1
            print("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ")

    print(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå: {len(data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå: {incomplete_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MongoDB
    if data:
        collection.insert_many(data)
        print("üìå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å CSV
    csv_filename = "homepro_products.csv"
    with open(csv_filename, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['Title', 'Price', 'Link', 'Scraped_At'])
        for item in data:
            writer.writerow([item["title"], item["price"], item["link"], item["scraped_at"]])

    print(f"üìå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå {csv_filename} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

except requests.exceptions.RequestException as e:
    print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
